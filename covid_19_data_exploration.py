# -*- coding: utf-8 -*-
"""COVID-19 Data Exploration

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rkmswvB9B22naTRtn2wN7Qg9fTr8K4ZL
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Set plot styles
sns.set(style="darkgrid")
plt.rcParams['figure.figsize'] = (12, 6)

"""Get dataset"""

# load data directly from GitHub
confirmed_url = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/' \
                'csse_covid_19_time_series/time_series_covid19_confirmed_global.csv'
deaths_url = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/' \
             'csse_covid_19_time_series/time_series_covid19_deaths_global.csv'
recovered_url = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/' \
                'csse_covid_19_time_series/time_series_covid19_recovered_global.csv'

# read csv files
confirmed = pd.read_csv(confirmed_url)
deaths = pd.read_csv(deaths_url)
recovered = pd.read_csv(recovered_url)

"""Clean and restructure dataset"""

def preprocess(df, value_name):
    # drop lat/long only
    df = df.drop(['Lat', 'Long'], axis=1, errors='ignore')

    # sum across provinces **after** melting
    df = df.melt(id_vars=['Province/State', 'Country/Region'], var_name='Date', value_name=value_name)

    # convert to datetime
    df['Date'] = pd.to_datetime(df['Date'], format='%m/%d/%y')

    # group by date and country to get total per day
    df = df.groupby(['Date', 'Country/Region'])[value_name].sum().reset_index()

    # rename for consistency
    df.rename(columns={'Country/Region': 'Country'}, inplace=True)

    return df


# preprocess datasets
confirmed_df = preprocess(confirmed, 'Confirmed')
deaths_df = preprocess(deaths, 'Deaths')
recovered_df = preprocess(recovered, 'Recovered')

# merge all
merged_df = confirmed_df.merge(deaths_df, on=['Date', 'Country'])
merged_df = merged_df.merge(recovered_df, on=['Date', 'Country'])

# filter for Philippines
country = 'Philippines'
country_df = merged_df[merged_df['Country'] == country].copy()

# preview non zero
country_df[country_df[['Confirmed', 'Deaths', 'Recovered']].sum(axis=1) > 0].head(10)

# check other outbreaks
merged_df[merged_df['Country'] == 'Japan'].head(10)

# check other outbreaks
merged_df[merged_df['Country'] == 'China'].head(10)

country = "Philippines"
country_df = merged_df[merged_df['Country'] == country]

# Plot Confirmed, Deaths, and Recovered
plt.figure(figsize=(14, 7))
plt.plot(country_df['Date'], country_df['Confirmed'], label='Confirmed')
plt.plot(country_df['Date'], country_df['Deaths'], label='Deaths')
plt.plot(country_df['Date'], country_df['Recovered'], label='Recovered')
plt.title(f'COVID-19 Cases Over Time in {country}')
plt.xlabel('Date')
plt.ylabel('Number of Cases')
plt.legend()
plt.show()

country_df = merged_df[merged_df['Country'] == country].copy()

# Add rolling averages (7-day)
country_df['Confirmed_Rolling'] = country_df['Confirmed'].rolling(7).mean()
country_df['Deaths_Rolling'] = country_df['Deaths'].rolling(7).mean()
country_df['Recovered_Rolling'] = country_df['Recovered'].rolling(7).mean()

# Plot
plt.figure(figsize=(14, 7))
plt.plot(country_df['Date'], country_df['Confirmed_Rolling'], label='Confirmed (7-day MA)')
plt.plot(country_df['Date'], country_df['Deaths_Rolling'], label='Deaths (7-day MA)')
plt.plot(country_df['Date'], country_df['Recovered_Rolling'], label='Recovered (7-day MA)')
plt.title(f'{country}: 7-Day Moving Averages')
plt.xlabel('Date')
plt.ylabel('Cases')
plt.legend()
plt.show()

country_df = merged_df[merged_df['Country'] == country].copy()

country_df['Daily_Confirmed'] = country_df['Confirmed'].diff().fillna(0)
country_df['Daily_Deaths'] = country_df['Deaths'].diff().fillna(0)
country_df['Daily_Recovered'] = country_df['Recovered'].diff().fillna(0)

# Plot daily new cases
plt.figure(figsize=(14, 7))
plt.plot(country_df['Date'], country_df['Daily_Confirmed'], label='Daily Confirmed')
plt.plot(country_df['Date'], country_df['Daily_Deaths'], label='Daily Deaths')
plt.plot(country_df['Date'], country_df['Daily_Recovered'], label='Daily Recovered')
plt.title(f'{country}: Daily New Cases')
plt.xlabel('Date')
plt.ylabel('Daily Count')
plt.legend()
plt.show()

#export optional
country_df.to_csv(f'{country}_covid_analysis.csv', index=False)

"""Interactable charts"""

!pip install plotly

import plotly.express as px
import plotly.graph_objects as go

fig = px.line(country_df, x='Date', y=['Confirmed', 'Deaths', 'Recovered'],
              title='Daily COVID-19 Cases in the Philippines',
              labels={'value': 'Number of Cases', 'variable': 'Case Type'})

fig.update_layout(legend_title_text='Case Type')
fig.show()

country_df['Confirmed_MA'] = country_df['Confirmed'].rolling(7).mean()
country_df['Deaths_MA'] = country_df['Deaths'].rolling(7).mean()
country_df['Recovered_MA'] = country_df['Recovered'].rolling(7).mean()

fig = go.Figure()
fig.add_trace(go.Scatter(x=country_df['Date'], y=country_df['Confirmed_MA'],
                         mode='lines', name='Confirmed (7-day MA)'))
fig.add_trace(go.Scatter(x=country_df['Date'], y=country_df['Deaths_MA'],
                         mode='lines', name='Deaths (7-day MA)'))
fig.add_trace(go.Scatter(x=country_df['Date'], y=country_df['Recovered_MA'],
                         mode='lines', name='Recovered (7-day MA)'))

fig.update_layout(title='7-Day Moving Averages in the Philippines',
                  xaxis_title='Date', yaxis_title='Cases',
                  legend_title='Type')
fig.show()

monthly = country_df.copy()
monthly['Month'] = monthly['Date'].dt.to_period('M').astype(str)
monthly_totals = monthly.groupby('Month')[['Confirmed', 'Deaths', 'Recovered']].sum().reset_index()

fig = px.bar(monthly_totals, x='Month', y=['Confirmed', 'Deaths', 'Recovered'],
             title='Monthly COVID-19 Totals in the Philippines',
             labels={'value': 'Cases', 'variable': 'Case Type'})

fig.update_layout(barmode='group')
fig.show()

fig = go.Figure()
fig.add_trace(go.Scatter(x=country_df['Date'], y=country_df['Confirmed'],
                         mode='lines', fill='tozeroy', name='Confirmed'))
fig.add_trace(go.Scatter(x=country_df['Date'], y=country_df['Deaths'],
                         mode='lines', fill='tonexty', name='Deaths'))
fig.add_trace(go.Scatter(x=country_df['Date'], y=country_df['Recovered'],
                         mode='lines', fill='tonexty', name='Recovered'))

fig.update_layout(title='Cumulative COVID-19 Cases in the Philippines',
                  xaxis_title='Date', yaxis_title='Cases',
                  legend_title='Case Type')
fig.show()